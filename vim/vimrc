" plugins, colorschemes and vimrc are stored here:
let vimdir = '~/.vim'



if !empty(glob(vimdir . '/autoload/pathogen.vim'))
    execute pathogen#infect()
endif

if has('autocmd')
    filetype plugin indent on
endif

" Syntax and Colors {{{
if has('syntax')
    syntax on

    " leave syntax highlight alone
    au ColorScheme * highlight DiffAdd    ctermfg=none guifg=none
    au ColorScheme * highlight DiffChange ctermfg=none guifg=none
    au ColorScheme * highlight DiffDelete ctermfg=none guifg=none
    au ColorScheme * highlight DiffText   ctermfg=none guifg=none

    let terminator_profile=$PROFILE
    " Settings to accomodate each colorscheme
    if terminator_profile ==? '' || terminator_profile ==? 'default'
        set t_Co=256
        set background=dark
        set cursorline
        set cursorcolumn
        colorscheme ir_black

        highlight SyntasticError             cterm=bold ctermfg=214 ctermbg=160
        highlight SyntasticWarning           cterm=bold ctermfg=220 ctermbg=166
        highlight link SyntasticStyleError   SyntasticError
        highlight link SyntasticStyleWarning SyntasticWarning

        highlight SyntasticErrorSign         cterm=bold ctermfg=160 ctermbg=none
        highlight SyntasticWarningSign       cterm=bold ctermfg=166 ctermbg=none
        highlight link SyntasticStyleErrorSign   SyntasticErrorSign
        highlight link SyntasticStyleWarningSign SyntasticWarningSign
    endif
    if terminator_profile ==? 'solarized'
        set t_Co=16
        set background=dark
        colorscheme solarized

        highlight SyntasticError             ctermfg=015 ctermbg=009
        highlight SyntasticWarning           ctermfg=015 ctermbg=010
        highlight link SyntasticStyleError   SyntasticError
        highlight link SyntasticStyleWarning SyntasticWarning
    endif

    " highlight whitespace characters at the end of each line
    highlight default TrailingWhitespace ctermbg=darkgreen guibg=darkgreen
    au BufRead     * match TrailingWhitespace '\V\s\+\$'
    au BufWrite    * match TrailingWhitespace '\V\s\+\$'
    au InsertEnter * match none
endif
" }}} Syntax and Colors



" Basic Settings {{{
set nocompatible

set noerrorbells
set visualbell
set t_vb=

set mouse=

set timeoutlen=150

set backspace=indent,start

set showmatch
set matchtime=3

let mapleader=' '

if has('autocmd')
    " return cursor to where you left off last time
    function s:RestoreCursorPosition()
        if line("'\"") > 1 && line("'\"") <= line('$')
            normal! g'"zz
        endif
    endfunction
    au BufReadPost * call <SID>RestoreCursorPosition()
endif
" }}} Basic Settings



" User Interface {{{
set showcmd

set number
set norelativenumber
set numberwidth=5

set laststatus=2

set title

set lazyredraw
if has('autocmd')
    set nolazyredraw
    function s:SetForGood(option, value)
        if '' == a:value
            execute 'set ' . a:option
        else
            execute 'set ' . a:option . '=' . a:value
        endif
        au! CursorHold *
    endfunction
    au CursorHold * call <SID>SetForGood('lazyredraw', '')
endif

set splitright
set splitbelow
set diffopt+=vertical

set hidden " I don't even know what this does but it's supposed to be on

if has('folding')
    set foldmethod=marker
    set foldlevelstart=99
endif
" }}} User Interface



" Searching {{{
set ignorecase
set smartcase
set noincsearch
set hlsearch
set gdefault

if exists(':noh')
    " clear search highlight
    noremap <silent> <leader>h :noh<CR>
endif

" asterisk searches for current selection
vnoremap * "zy/<C-r>z<CR>
vnoremap # "zy?<C-r>z<CR>
if exists(':function')
    function s:VisualSearch()
        let temp = @z
        normal! gv"zy
        let @/ = '\V' . @z
        let @z = temp
    endfunction
    " override mappings above
    vnoremap * :call <SID>VisualSearch()<CR>/<CR>
    vnoremap # :call <SID>VisualSearch()<CR>?<CR>
endif
" }}} Searching



" Persistence {{{
set history=1000
" Persistent undo. Why the hell isn't this default anyway?
if has('persistent_undo')
    set undofile
    execute 'set undodir=' . vimdir . '/undo'
endif
execute 'set directory=' . vimdir . '/swap'
set nobackup
set nowritebackup

set sessionoptions-=options
" }}} Persistence



" Wildmenu {{{
set wildmenu
set wildignore+=*.o,*.out,*.obj
set wildignore+=*.bmp,*.gif,*.jpg,*.jpeg,*.png,*.ppm
set wildignore+=*.odt,*.ods,*.odp,*.doc,*.docx,*.xls,*.ppt
set wildignore+=*.pdf,*.djvu,*.djv
set wildignore+=*.flac,*.mp3,*.ogg,*.wav
set wildignore+=*.avi,*.mkv,*.mov,*.mpg,*.mpeg,*.mp4,*.ogv,*.wmv
set wildignore+=*.flv,*.swf
set wildignore+=*.so,*.swp
set wildignore+=*.tar.bz2,*.tar.gz,*.tgz,*.tar.xz,*.7z,*.rar,*.zip
" }}} Wildmenu



" Code Formatting {{{
set expandtab
set smarttab " not sure about this one yet
set shiftwidth=4
set tabstop=4
set softtabstop=4
set textwidth=80
set nowrap
set scrolloff=1

set autoindent
set cindent " not sure about this one yet

au FileType * set formatoptions+=jn
au FileType * set formatoptions-=ro

au Filetype gitcommit setlocal spell
" }}} Code Formatting



" Miscellaneous Settings {{{
set autoread " not sure about this one yet

set pastetoggle=,p

if exists('+omnifunc')
    set omnifunc=syntaxcomplete#Complete
endif
" }}} Miscellaneous Settings



" Mappings {{{

" Navigation {{{
" é is right under your pinky on a Hungarian keyboard
noremap é ;
noremap É ,

noremap j gj
noremap k gk

noremap J L10k
noremap K H10j

" jump inside brackets
" improve these to use /(.\{-}) later
nnoremap ) t)vib
nnoremap ( T(vib

" visually select last edited/pasted text (from github.com/iamvery/dotfiles)
nnoremap gV `[v`]

" go to definition as in Visual Studio (try both global declaration and tag jump)
nnoremap <C-g> gDg]
" swap commands for link navigation in online help
nnoremap <C-t> <C-]>
nnoremap <C-]> <C-t>

" this hack makes G jump to and fro between the first and last lines
if exists(':function')
    function s:ToggleG()
        if ( 0 == v:count && line('$') == line('.') )
            return 'gg'
        else
            return 'G'
        endif
    endfunction
    nnoremap <expr> G <SID>ToggleG()
endif
" }}} Navigation

" Editing {{{
" use C-j for joining
noremap <C-j> J
set nojoinspaces

inoremap <CR> <Esc>
vnoremap <CR> <Esc>

nmap <C-k> "_dd
vmap <C-k> "_d

nnoremap Y y$

inoremap <C-l> <C-x><C-l>
inoremap <C-f> <C-x><C-f>
" }}} Editing

" Windows and Tabs {{{
map <silent> <C-s> :vsplit<CR>
map <Tab> <C-w>w
" Tab is the same as C-i. We're going to need a replacement to navigate the jumplist
nnoremap <C-n> <C-i>

nnoremap <C-Up> <C-w>+
nnoremap <C-Down> <C-w>-
nnoremap <C-Left> <C-w><
nnoremap <C-Right> <C-w>>

set tabpagemax=20

map <C-h> gT
map <C-l> gt

cnoreabbrev bufs buffers

" open up help in a vsplit
cabbrev H vertical h
cabbrev h vertical h

nnoremap ZZ :wqa<CR>
" }}} Windows and Tabs

" }}} Mappings



" Plugin Configuration {{{

" NERDTree {{{
if !empty(glob(vimdir . '/bundle/nerdtree'))
    " TODO: do something about the startup lag
    nnoremap <silent> Q :NERDTreeToggle<CR>
    nnoremap <silent> <leader>n :NERDTreeToggle<CR>
    nnoremap <silent> <leader>m :NERDTreeFind<CR>
    " open NERDTree if no files were specified
    if has('autocmd')
        autocmd StdinReadPre * let s:std_in=1
        autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
    endif
    let g:NERDTreeRespectWildIgnore=1
endif
" }}} NERDTree

" Tagbar {{{
if !empty(glob(vimdir . '/bundle/tagbar'))
    noremap <silent> <leader>l :TagbarToggle<CR>
endif
" }}} Tagbar

" smooth-scroll {{{
if !empty(glob(vimdir . '/bundle/vim-smooth-scroll'))
    noremap <silent> <C-u> :call smooth_scroll#up(&scroll, 10, 1)<CR>
    noremap <silent> <C-d> :call smooth_scroll#down(&scroll, 10, 1)<CR>
    noremap <silent> <C-b> :call smooth_scroll#up(&scroll*2, 5, 1)<CR>
    noremap <silent> <C-f> :call smooth_scroll#down(&scroll*2, 5, 1)<CR>
endif
" }}} smooth-scroll

" Airline {{{
if !empty(glob(vimdir . '/bundle/vim-airline'))
    highlight clear TrailingWhitespace
    highlight link  TrailingWhitespace airline_warning
    set noshowmode
    let g:airline#extensions#tabline#enabled=1
endif
" }}} Airline

" Gundo {{{
if !empty(glob(vimdir . '/bundle/gundo.vim'))
    nnoremap <silent> <leader>g :GundoToggle<CR>
    let g:gundo_width=50
endif
" }}} Gundo

" Ctrl-P {{{
if !empty(glob(vimdir . '/bundle/ctrlp.vim'))
    let g:ctrlp_cmd='CtrlPMRUFiles'
    let g:ctrlp_match_window='bottom,order:btt,min:10,max:10'
    let g:ctrlp_show_hidden=1
    let g:ctrlp_switch_buffer='Et'
    let g:ctrlp_working_path_mode='ra'
endif
" }}} Ctrl-P

" Ag, The Silver Searcher {{{
if !empty(glob(vimdir . '/bundle/ag.vim'))
    let g:ag_working_path_mode='r'
    noremap <leader>a :Ag 
endif
" }}} Ag, The Silver Searcher

" Syntastic! {{{
if !empty(glob(vimdir . '/bundle/syntastic'))
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_check_on_open = 0
    let g:syntastic_check_on_wq = 0

    let g:syntastic_cpp_checkers=['gcc', 'cppcheck']
    let g:syntastic_haskell_checkers=['hlint']
    let g:syntastic_haskell_hlint_args="--hint=Default --hint=Dollar --hint=Generalise"
    let g:syntastic_javascript_checkers=['eslint', 'jshint']
    let g:syntastic_vim_checkers=['vint']
    let g:syntastic_vim_vint_quiet_messages={ 'level': 'warning' }
endif
" }}} Syntastic!

" gitgutter {{{
if !empty(glob(vimdir . '/bundle/vim-gitgutter'))
    set numberwidth=1 " override previous setting
    set updatetime=150
    let g:gitgutter_diff_args = '--minimal -w'
    let g:gitgutter_sign_column_always = 1
    if terminator_profile ==? 'solarized'
        let g:gitgutter_highlight_lines = 1
    endif
endif
" }}} gitgutter

" EasyMotion {{{
"if !empty(glob(vimdir . '/bundle/vim-easymotion'))
" TODO!
" }}} EasyMotion

" Rainbow Parentheses {{{
if !empty(glob(vimdir . '/bundle/rainbow_parentheses.vim'))
    " mix up the colors so they're more distinct
    " also, darkgray is invisible in solarized
    let g:rbpt_colorpairs = [
        \ ['darkcyan',    'black'],
        \ ['gray',        'black'],
        \ ['Darkblue',    'black'],
        \ ['black',       'black'],
        \ ['brown',       'black'],
        \ ['darkred',     'black'],
        \ ['darkmagenta', 'black'],
        \ ['darkgreen',   'black'],
        \ ['red',         'black'],
        \ ['darkcyan',    'black'],
        \ ['Darkblue',    'black'],
        \ ['darkmagenta', 'black'],
        \ ['darkgreen',   'black'],
        \ ['darkred',     'black'],
        \ ['brown',       'black']
    \ ]

    if has('autocmd')
        autocmd VimEnter * RainbowParenthesesActivate
        autocmd Syntax * RainbowParenthesesLoadBraces
        autocmd Syntax * RainbowParenthesesLoadRound
        " TODO: hack plugin to make chevrons work right
    endif

    nnoremap <silent> ,, :RainbowParenthesesToggle<CR>
endif
" }}} Rainbow Parentheses

" dragvisuals.vim {{{
if !empty(glob(vimdir . '/bundle/dragvisuals.vim'))
    vmap <expr> <C-Left>  DVB_Drag('left')
    vmap <expr> <C-Right> DVB_Drag('right')
    vmap <expr> <C-Down>  DVB_Drag('down')
    vmap <expr> <C-Up>    DVB_Drag('up')
    vmap <expr> D         DVB_Duplicate()
endif
" }}} dragvisuals.vim

" AutoClose {{{
if !empty(glob(vimdir . '/bundle/vim-autoclose'))
    let g:autoclose_vim_commentmode = 1
endif
" }}} AutoClose

" commentary.vim {{{
if !empty(glob(vimdir . '/bundle/vim-commentary'))
    nmap <C-c> gcc
    vmap <C-c> gc
endif
" }}} commentary.vim

" }}} Plugin Configuration

